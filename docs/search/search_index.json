{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#gpr-max-ui","title":"GPR-MAX UI","text":"<p>GprMax-UI provides a high-level API to run gprMax models along with a set of functions for visualization, analysis and interpreting the results. </p> <p></p>"},{"location":"#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.10+</li> <li>gprMax</li> </ul>"},{"location":"#install-pycuda","title":"Install Pycuda","text":"<pre><code>sudo apt install build-essential clang\nsudo apt install libstdc++-12-dev\nexport CUDA_HOME=/usr/local/cuda\nexport PATH=$CUDA_HOME/bin:$PATH\nexport LD_LIBRARY_PATH=$CUDA_HOME/lib64:$LD_LIBRARY_PATH\nuv add pycuda --optional gpu\n</code></pre>"},{"location":"#install-gprmax","title":"Install gprMax","text":"<pre><code>git clone https://github.com/gprMax/gprMax.git\nsudo apt install libgomp1\nsudo apt install libomp-dev\npython setup.py build\npython setup.py develop --no-deps\n</code></pre>"},{"location":"#installation-gprmaxui","title":"Installation gprMaxUI","text":"<pre><code>pip install gprmaxui\n</code></pre>"},{"location":"#build-the-documentation","title":"Build the documentation","text":"<pre><code>mkdocs build\nmkdocs serve -a localhost:8000\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<pre><code>from pathlib import Path\nfrom gprmaxui import *\n\n# Create a GPRMax model\nmodel = GprMaxModel(\n    title=\"B scan from a single target buried in a dielectric half-space\",\n    output_folder=Path(\"output\"),\n    domain_size=DomainSize(x=0.2, y=0.2, z=0.002),\n    domain_resolution=DomainResolution(dx=0.002, dy=0.002, dz=0.002),\n    time_window=TimeWindow(twt=3e-9),\n)\n# Register model materials\nmodel.register_materials(\n    Material(id=\"half_space\", permittivity=6, conductivity=0, permeability=1)\n)\n\n# add model geometries\nbox = DomainBox(\n    x_min=0.0,\n    y_min=0.0,\n    z_min=0.0,\n    x_max=0.2,\n    y_max=0.145,\n    z_max=0.002,\n    material=\"half_space\",\n)\nmodel.add_geometry(box)\n\ncx = box.center().x\ncy = box.center().y\ncz = box.center().z\nsphere = DomainSphere(cx=cx, cy=cy, cz=cz, radius=0.005, material=\"pec\")\nmodel.add_geometry(sphere)\n\n# Register model sources\ntx_rx_sep = 2e-2\ntx = Tx(\n    waveform=Waveform(wave_family=\"ricker\", amplitude=1.0, frequency=1.5e9),\n    source=HertzianDipole(polarization=\"z\", x=0.03, y=0.15, z=0.0),\n)\nrx = Rx(x=tx.source.x + tx_rx_sep, y=0.15, z=0.0)\n\nmodel.set_source(\n    TxRxPair(\n        tx=tx,\n        rx=rx,\n        src_steps=SrcSteps(dx=0.002, dy=0.0, dz=0.0),\n        rx_steps=RxSteps(dx=0.002, dy=0.0, dz=0.0),\n    )\n)\n\nmodel.run(n=\"auto\", geometry=True, snapshots=True)\nmodel.plot_data()\n</code></pre>"},{"location":"tutorials/getting_started/","title":"Getting Started","text":"<p>GprMax is open-source software that simulates electromagnetic wave propagation. It solves Maxwell\u2019s equations in 3D using the Finite-Difference Time-Domain (FDTD) method. Although it was designed initially for modeling Ground Penetrating Radar (GPR), it can also be used to model electromagnetic wave propagation for many other applications.  GprMax-UI enhances this functionality by providing a high-level API for executing GprMax models, along with tools for visualization, analysis, and result interpretation. This tutorial will guide you through the basic steps of using GPRMaxUI to run a simulation and view the results. </p> <p>We start by importing the necessary modules.</p> <p></p><pre><code>from gprmaxui import *\n</code></pre> We can then proceed to create our GprMaxModel using the following code snippet: <pre><code>model = GprMaxModel(\n    title=\"B scan from a single target buried in a dielectric half-space\",\n    output_folder=Path(\"output\"),\n    domain_size=DomainSize(x=0.2, y=0.2, z=0.002),\n    domain_resolution=DomainResolution(dx=0.002, dy=0.002, dz=0.002),\n    time_window=TimeWindow(twt=3e-9),\n)\n</code></pre> Material properties are defined using the Material class. The following code snippet shows how to define a material with a relative permittivity of 6, conductivity of 0 and relative permeability of 1. <p></p><pre><code>model.register_materials(\n    Material(\n        id=\"half_space\", permittivity=6, conductivity=0, permeability=1\n    )\n)\n</code></pre> For register model sources. You define a TxRxPair instance and pass it to the model.set_source() method. <pre><code>tx_rx_sep = 2e-2\ntx = Tx(\n    waveform=Waveform(wave_family=\"ricker\", amplitude=1.0, frequency=1.5e9),\n    source=HertzianDipole(polarization=\"z\", x=0.03, y=0.15, z=0.0),\n)\nrx = Rx(x=tx.source.x + tx_rx_sep, y=0.15, z=0.0)\n\nmodel.set_source(\n    TxRxPair(\n        tx=tx,\n        rx=rx,\n        src_steps=SrcSteps(dx=0.002, dy=0.0, dz=0.0),\n        rx_steps=RxSteps(dx=0.002, dy=0.0, dz=0.0),\n    )\n)\n</code></pre> <p>We continue defining our model by adding the model geometries. For this example, we will add a box to the model domain using the DomainBox class and a sphere using the DomainSphere class. We use meters for defining the geometries dimensions.</p> <p></p><pre><code># add model geometries\nbox = DomainBox(\n    x_min=0.0,\n    y_min=0.0,\n    z_min=0.0,\n    x_max=0.2,\n    y_max=0.145,\n    z_max=0.002,\n    material=\"half_space\",\n)\nmodel.add_geometry(box)\n\ncx = box.center().x\ncy = box.center().y\ncz = box.center().z\nsphere = DomainSphere(cx=cx, cy=cy, cz=cz, radius=0.005, material=\"pec\")\nmodel.add_geometry(sphere)\n</code></pre> Finally, we run the simulation using the <code>model.run()</code> method. <pre><code>model.run(n=\"auto\", geometry=True, snapshots=True)\n</code></pre> To access the simulation data, you can use the <code>model.data()</code> function, which returns a dictionary containing the data for each receiver component. For more information about the data format, please refer to the GprMax documentation. <pre><code>data_dict = model.data()\nfor rx_component, data in data_dict.items():\n    data_arr, dt = data\n</code></pre> <p>Tip</p> <p>You can also check the geometry of your model before running the simulation using the <code>model.plot_geometry()</code> function.</p> <p>output</p> <p></p>"},{"location":"tutorials/getting_started/#visualizing-the-results","title":"Visualizing the results","text":"<p>GprMaxUI provides a set of functions to visualize the simulation data and interpret the results.</p>"},{"location":"tutorials/getting_started/#plot-data","title":"Plot data","text":"<pre><code>model.plot_data()\n</code></pre>"},{"location":"tutorials/getting_started/#plot-snapshots","title":"Plot Snapshots","text":"<p>Snapshots can also be visualized using the <code>model.plot_snapshot(trace_idx=35, iteration_idx=350)</code> function. It will be useful to visualize how is the propagation of the wavefront through the model domain at a given time step defined by the <code>iteration_idx</code> and the trace index defined by the <code>trace_idx.</code></p> <pre><code>model.plot_snapshot(trace_idx=60, iteration_idx=300)\n</code></pre> <p></p> <p>We can use that function to create multiple snapshots at a given period of time using the following code snippet:</p> <pre><code>from gprmaxui import make_images_grid\n\ncaptures = []\ntrace_idx = 35\nfor i in range(1, 500, 80):\n    snapshot_image = model.plot_snapshot(trace_idx=trace_idx, iteration_idx=i, return_image=True)\n    captures.append(snapshot_image)\nprint(len(captures))\noutput_image = make_images_grid(captures, num_cols=4)\noutput_image.show()\n</code></pre> <p></p>"},{"location":"tutorials/getting_started/#plot-video","title":"Plot Video","text":"<p>Finally, you can create a video of the simulation using the <code>model.save_video(\"test.mp4\")</code> function.  </p><pre><code>model.save_video(\"test.mp4\")\n</code></pre> <p></p>"}]}